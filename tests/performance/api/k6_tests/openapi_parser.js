import http from 'k6/http';
import { check } from 'k6';
import { logError } from './utils.js';

let openapiSpec = null;

export function loadOpenApiSpec(url) {
    console.log(`üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ OpenAPI —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å ${url}...`);
    const response = http.get(url);
    
    if (check(response, { 'OpenAPI –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ': (r) => r.status === 200 })) {
        console.log('‚úÖ –°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è OpenAPI –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
        openapiSpec = response.json();
    } else {
        logError('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ OpenAPI —Å—Ö–µ–º—ã');
    }
}

export function getSchemaForEndpoint(method, path) {
    if (!openapiSpec) {
        logError('‚ùå OpenAPI —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞.');
        return null;
    }

    const pathItem = openapiSpec.paths[path];
    if (!pathItem) {
        logError(`–ü—É—Ç—å ${path} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏`);
        return null;
    }

    const operation = pathItem[method.toLowerCase()];
    if (!operation) {
        logError(`–ú–µ—Ç–æ–¥ ${method} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø—É—Ç–∏ ${path}`);
        return null;
    }

    const response200 = operation.responses["200"] || operation.responses["201"];
    if (!response200) {
        logError(`–û—Ç–≤–µ—Ç 200 –∏–ª–∏ 201 –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è ${method} ${path}`);
        return null;
    }

    const schemaRef = response200.content["application/json"].schema["$ref"];
    if (!schemaRef) {
        logError(`$ref –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è ${method} ${path}`);
        return null;
    }

    const schemaName = schemaRef.split('/').pop();
    return openapiSpec.components.schemas[schemaName];
}
